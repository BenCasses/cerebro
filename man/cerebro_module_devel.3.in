\."#############################################################################
\."$Id: cerebro_module_devel.3.in,v 1.4 2005-06-01 16:40:23 achu Exp $
\."#############################################################################
.TH LIBCEREBRO 3 "May 2005" "LLNL" "LIBCEREBRO"
.SH NAME
Introduction to writing cerebro modules
.SH SYNOPSIS
.BI #include <cerebro/cerebro_clusterlist_module.h>
.sp
.BI #include <cerebro/cerebro_config.h>
.sp
.BI #include <cerebro/cerebro_config_module.h>
.sp
.BI #include <cerebro/cerebro_constants.h>
.sp
.BI #include <cerebro/cerebro_error.h>
.sp
.BI void cerebro_err_debug_module(const char *fmt, ...);
.br
.SH DESCRIPTION
Additional information about the development of cerebro clusterlist
and config modules can be found below.

Module writers should use \fBcerebro_err_debug_module\fR when debugging
information is output.

.SH CLUSTERLIST MODULES
A cerebro clusterlist module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_clusterlist_foobar.so, and installing it in the cerebro
package library directory @CEREBRO_MODULE_DIR@.

The clusterlist module should define a structure of the following
type:

.nf
struct cerebro_clusterlist_module_info {
.in +2
  char *clusterlist_module_name;
  Cerebro_clusterlist_setup setup;
  Cerebro_clusterlist_cleanup cleanup;
  Cerebro_clusterlist_numnodes numnodes;
  Cerebro_clusterlist_get_all_nodes get_all_nodes;
  Cerebro_clusterlist_node_in_cluster node_in_cluster;
  Cerebro_clusterlist_get_nodename get_nodename;
.in -2
};
.fi

The structure should be named 'clusterlist_module_info' and be populated
with the following information.

The field 'clusterlist_module_name' should indicate the name of the
clusterlist module.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_setup)(void);

The 'setup' function sets up the clusterlist module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_cleanup)(void);

The 'cleanup' function cleans up the clusterlist module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'numnodes' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_numnodes)(void);

The 'numnodes' function returns the number of nodes in the
cluster, or -1 on error.

The field 'get_all_nodes' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_get_all_nodes)(char ***nodes);

The 'get_all_nodes' function retrieves a list of nodes in the cluster.
The caller is responsible for freeing the created char ** array of
nodes.  The returned array of strings should be NULL
terminated. Returns the number of cluster nodes retrieved on success,
-1 on error.

The field 'node_in_cluster' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_node_in_cluster)(const char *node);

The 'node_in_cluster' function is passed a nodename.  It returns 1 if
the specified node is in the cluster, 0 if not, and -1 on error.

The field 'get_nodename' should point to a function of the following type:

typedef int (*Cerebro_clusterlist_get_nodename)(const char *node, char *buf, unsigned int buflen);

The 'get_nodename' function is passed a nodename, a buffer, and a
buffer length.  It determines the appropriate nodename to use and
copies it into the buffer.  This function is primarily used to convert
aliased nodenames into the appropriate nodename to use for
calculations.  The majority of clusterlist module writers will
probably copy the nodename directly into the buffer and not do any
calculations.  'get_nodename' returns 0 on success, -1 on error.

All of the above functions must be defined in the module and listed in
the 'clusterlist_module_info' structure.

.SH CONFIG MODULES
A cerebro config module of the name 'foobar' can be written by
compiling a shared object library with the filename
cerebro_config_foobar.so, and installing it in the cerebro package
library directory  @CEREBRO_MODULE_DIR@.

The config module should define a structure of the following
type:

.nf
struct cerebro_config_module_info {
.in +2
  char *config_module_name;
  Cerebro_config_setup setup;
  Cerebro_config_cleanup cleanup;
  Cerebro_config_load_default load_default;
.in -2
};
.fi

The structure should be named 'config_module_info' and be populated
with the following information.

The field 'config_module_name' should indicate the name of the
config module.

The field 'setup' should point to a function of the following type:

typedef int (*Cerebro_config_setup)(void);

The 'setup' function sets up the config module with whatever
initialization is necessary.  It returns 0 on success, -1 on error.

The field 'cleanup' should point to a function of the following type:

typedef int (*Cerebro_config_cleanup)(void);

The 'cleanup' function cleans up the config module from earlier
initializations.  It returns 0 on success, -1 on error.

The field 'load_default' should point to a function of the following
type:

typedef int (*Cerebro_config_load_default)(struct cerebro_config *conf);

The 'load_default' function loads an alternate set of configuration
values and stores them within the configuration structure passed in.

All of the above functions must be defined in the module and listed in
the 'config_module_info' structure.

The structure cerebro_config is defined as:

.nf
struct cerebro_config {
.in +2
  char cerebro_hostnames[CEREBRO_CONFIG_HOSTNAMES_MAX][CEREBRO_MAXNODENAMELEN+1];
  int cerebro_hostnames_len;
  int cerebro_hostnames_flag;
  unsigned int cerebro_port;
  int cerebro_port_flag;
  unsigned int cerebro_timeout_len;
  int cerebro_timeout_len_flag;
  int cerebro_flags;
  int cerebro_flags_flag;

  unsigned int cerebrod_heartbeat_frequency_min;
  unsigned int cerebrod_heartbeat_frequency_max;
  int cerebrod_heartbeat_frequency_flag;
  int cerebrod_heartbeat_source_port;
  int cerebrod_heartbeat_source_port_flag;
  int cerebrod_heartbeat_destination_port;
  int cerebrod_heartbeat_destination_port_flag;
  char cerebrod_heartbeat_destination_ip[CEREBRO_MAXIPADDRLEN+1];
  int cerebrod_heartbeat_destination_ip_flag;
  char cerebrod_heartbeat_network_interface[CEREBRO_MAXNETWORKINTERFACELEN+1];
  int cerebrod_heartbeat_network_interface_flag;
  int cerebrod_heartbeat_ttl;
  int cerebrod_heartbeat_ttl_flag;
  int cerebrod_speak;
  int cerebrod_speak_flag;
  int cerebrod_listen;
  int cerebrod_listen_flag;
  int cerebrod_listen_threads;
  int cerebrod_listen_threads_flag;
  int cerebrod_metric_server;
  int cerebrod_metric_server_flag;
  int cerebrod_metric_server_port;
  int cerebrod_metric_server_port_flag;
.if 1 \{
  int cerebrod_speak_debug;
  int cerebrod_speak_debug_flag;
  int cerebrod_listen_debug;
  int cerebrod_listen_debug_flag;
  int cerebrod_metric_server_debug;
  int cerebrod_metric_server_debug_flag;
\}
.in -2
};
.fi

The 'hostnames' field should store an array of default hostnames for
the libcerebro API should attempt to connect to.

The 'port' field should store the default port for
the libcerebro API should attempt to connect to.

The 'timeout_len' field should store the default timeout length
the libcerebro API should use to evaluate up vs. down nodes.

The 'flags' field should store the default flags the libcerebro API
should use.

The 'cerebrod_heartbeat_frequency_min' and
'cerebrod_heartbeat_frequency_max' fields store the minimum and
maximum heartbeat frequencey for
.BR cerebrod(8).

The 'cerebrod_heartbeat_source_port' field stores the heartbeat source
port for
.BR cerebrod(8).

The 'cerebrod_heartbeat_destination_port' field stores the heartbeat
destination port for
.BR cerebrod(8).

The 'cerebrod_heartbeat_destination_ip' field stores the heartbeat
destination ip of heartbeat packets sent from
.BR cerebrod(8).
The destination IP address may be a single case or multicast IPv4
address.

The 'cerebrod_heartbeat_network_interface' field stores the heartbeat
network interface for
.BR cerebrod(8)
to send heartbeat packets out of.  The network interface can be
specified as a network interface, ip address, or a subnet using CIDR
notation.

The 'cerebrod_heartbeat_ttl' field stores the heartbeat time to live
for heartbeat packets multicast from
.BR cerebrod(8).

The 'cerebrod_speak' field is a boolean that turns on the 
.BR cerebrod(8)
speaker to send out heartbeat packets.

The 'cerebrod_listen' field is a boolean that turns on the
.BR cerebrod(8)
listener to receive heartbeat packets.

The 'cerebrod_listen_threads' field stores the number of listener
threads that should be created in
.BR cerebrod(8).

The 'cerebrod_metric_server' field is a boolean that turns on the
.BR cerebrod(8)
metric server to receive metric data requests.

The 'cerebrod_metric_server_port' field stores the metric server
port for 
.BR cerebrod(8).
.if @MANPAGE_DEBUG@ \{

The 'cerebrod_speak_debug' field is a boolean that turns on speaker
debugging for 
.BR cerebrod.

The 'cerebrod_listen_debug' field is a boolean that turns on listener
debugging for
.BR cerebrod.

The 'cerebrod_metric_server_debug' field is a boolean that turns on
metric server debugging for
.BR cerebrod.

\}

Any parameter that is set in the configuration structure must have its
respective flag set.  The 'hostnames' field must also have the
'hostnames_len' field appropriately set to the number of hostnames
loaded.

.SH SEE ALSO
libcerebro(3), cerebro_module(3), cerebro.conf(5)
