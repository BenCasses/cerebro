\."#############################################################################
\."$Id: libcerebro.3,v 1.10 2005-06-07 17:26:50 achu Exp $
\."#############################################################################
.TH LIBCEREBRO 3 "August 2003" "LLNL" "LIBCEREBRO"
.SH NAME
libcerebro \- a library of functions to determine if a node is up
or down
.SH SYNOPSIS
.B #include <cerebro.h>
.sp
.BI "cerebro_t cerebro_handle_create(void);"
.sp
.BI "int cerebro_handle_destroy(cerebro_t handle);"
.sp
.BI "int cerebro_errnum(cerebro_t handle);"
.sp
.BI "int cerebro_nodelist_errnum(cerebro_nodelist_t nodelist);"
.sp
.BI "int cerebro_nodelist_iterator_errnum(cerebro_nodelist_iterator_t handle);"
.sp
.BI "char *cerebro_strerror(int errnum);"
.sp
.BI "int cerebro_set_hostname(cerebro_t handle, const char *hostname);"
.sp
.BI "int cerebro_set_port(cerebro_t handle, unsigned int port);"
.sp
.BI "int cerebro_set_timeout_len(cerebro_t handle, unsigned int timeout_len);"
.sp
.BI "int cerebro_set_flags(cerebro_t handle, unsigned int flags);"
.sp
.BI "cerebro_nodelist_t cerebro_get_metric_data(cerebro_t handle, const char *metric_name);"
.sp
.BI "char *cerebro_nodelist_metric_name(cerebro_nodelist_t nodelist);
.sp
.BI "int cerebro_nodelist_length(cerebro_nodelist_t nodelist);
.sp
.BI "int cerebro_nodelist_find(cerebro_nodelist_t nodelist, const char *node, unsigned int *metric_value_type, unsigned int *metric_value_len, void **metric_value);"
.sp
.BI "int cerebro_nodelist_for_each(cerebro_nodelist_t nodelist, Cerebro_for_each for_each, void *arg);"
.sp
.BI "int cerebro_nodelist_destroy(cerebro_nodelist_t nodelist);"
.sp
.BI "cerebro_nodelist_iterator_t cerebro_nodelist_iterator_create(cerebro_nodelist_t nodelist);"
.sp
.BI "int cerebro_nodelist_iterator_nodename(cerebro_nodelist_iterator_t nodelistItr, char **nodename);"
.sp
.BI "int cerebro_nodelist_iterator_metric_value(cerebro_nodelist_iterator_t nodelistItr, unsigned int *metric_value_type, unsigned int *metric_value_len, void **metric_value);"
.sp
.BI "int cerebro_nodelist_iterator_next(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_reset(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_at_end(cerebro_nodelist_iterator_t nodelistItr);"
.sp
.BI "int cerebro_nodelist_iterator_destroy(cerebro_nodelist_iterator_t nodelistItr);"
.br
.SH DESCRIPTION
The cerebro library contains functions to gather status information
about a cluster.

For API information, please see the individual manpages for each of
the functions above, or read the comments written in
/usr/include/cerebro.h.  The
.B Cerebro
configuration file, clusterlist module, or configuration module may be
loaded or called during API calls.  Please see the
.BR cerebro.conf(5)
manpage for information about the cerebro configuration file.  Please see
the 
.BR cerebro_module(3)
manpage for information on cerebro modules.  

.SH FILES
/usr/include/cerebro.h
.SH SEE ALSO
cerebro_handle_create(3), cerebro_handle_destroy(3),
cerebro_errnum(3), cerebro_nodelist_errnum(3),
cerebro_nodelist_iterator_errnum(3), cerebro_strerror(3),
cerebro_set_hostname(3), cerebro_set_port(3),
cerebro_set_timeout_len(3), cerebro_set_flags(3),
cerebro_get_metric_data(3), cerebro_nodelist_metric_name(3),
cerebro_nodelist_length(3), cerebro_nodelist_find(3),
cerebro_nodelist_for_each(3), cerebro_nodelist_destroy(3),
cerebro_nodelist_iterator_create(3),
cerebro_nodelist_iterator_nodename(3),
cerebro_nodelist_iterator_metric_value(3),
cerebro_nodelist_iterator_next(3), cerebro_nodelist_iterator_reset(3),
cerebro_nodelist_iterator_at_end(3),
cerebro_nodelist_iterator_destroy(3), cerebro_module(3),
.if !@WITH_STATIC_MODULES@ \{
cerebro_module_devel(3),
\}
cerebro.conf(5)
