/*****************************************************************************\
 *  $Id: cerebro_metric_control_protocol.h.in,v 1.9 2006-11-08 00:34:04 chu11 Exp $
 *****************************************************************************
 *  Copyright (C) 2005 The Regents of the University of California.
 *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
 *  Written by Albert Chu <chu11@llnl.gov>.
 *  UCRL-CODE-155989 All rights reserved.
 *
 *  This file is part of Cerebro, a collection of cluster monitoring
 *  tools and libraries.  For details, see
 *  <http://www.llnl.gov/linux/cerebro/>.
 *
 *  Cerebro is free software; you can redistribute it and/or modify it under
 *  the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  Cerebro is distributed in the hope that it will be useful, but WITHOUT ANY
 *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 *  details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with Genders; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
\*****************************************************************************/

#ifndef _CEREBRO_METRIC_CONTROL_PROTOCOL_H
#define _CEREBRO_METRIC_CONTROL_PROTOCOL_H

#include <sys/types.h>
#include <cerebro/cerebro_constants.h>

/* Metric Control Protocol
 *
 * Client -> Server
 * - Metric request.
 * 
 * Server -> Client
 * - Metric response.
 *
 */

#define CEREBRO_METRIC_CONTROL_PROTOCOL_VERSION               1
/* 
 * Even though the controller protocol is through a local unix domain
 * socket, we'll still need timeouts to ensure the user isn't being an
 * idiot and not sending data.
 */
#define CEREBRO_METRIC_CONTROL_PROTOCOL_SERVER_TIMEOUT_LEN    3
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CLIENT_TIMEOUT_LEN    5
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CONNECT_TIMEOUT_LEN   5

#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_SUCCESS           0
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_VERSION_INVALID   1
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_COMMAND_INVALID   2
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_METRIC_INVALID    3
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_PARAMETER_INVALID 4
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_PACKET_INVALID    5
/* CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_METRIC_MAX currently not possible */
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_METRIC_MAX        6
#define CEREBRO_METRIC_CONTROL_PROTOCOL_ERR_INTERNAL_ERROR    7

#define CEREBRO_METRIC_CONTROL_PROTOCOL_CMD_REGISTER          0
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CMD_UNREGISTER        1
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CMD_UPDATE            2
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CMD_RESEND            3
#define CEREBRO_METRIC_CONTROL_PROTOCOL_CMD_FLUSH             4

#define CEREBRO_METRIC_CONTROL_PATH  @METRIC_CONTROL_PATH@

/*
 * struct cerebro_metric_control_request
 *
 * defines a metric control request
 */
struct cerebro_metric_control_request
{
  int32_t version;
  int32_t command;
  char metric_name[CEREBRO_MAX_METRIC_NAME_LEN];
  u_int32_t metric_value_type;
  u_int32_t metric_value_len;
  void *metric_value;
};

#define CEREBRO_METRIC_CONTROL_REQUEST_HEADER_LEN  (sizeof(int32_t) \
                                                    + sizeof(int32_t) \
                                                    + CEREBRO_MAX_METRIC_NAME_LEN \
                                                    + sizeof(u_int32_t) \
                                                    + sizeof(u_int32_t))

/*
 * struct cerebro_metric_control_response
 *
 * defines a metric control response.
 */
struct cerebro_metric_control_response
{
  int32_t version;
  u_int32_t err_code;
};
  
#define CEREBRO_METRIC_CONTROL_RESPONSE_LEN  (sizeof(int32_t) \
                                             + sizeof(u_int32_t))

#endif /* _CEREBRO_METRIC_CONTROL_PROTOCOL_H */
